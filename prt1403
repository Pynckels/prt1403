#! /usr/bin/env python3

# Copyright 2025 Filip Pynckels
# See README.md at https://github.com/Pynckels/prt1403

# Acknowledgement
# virtual1403: https://github.com/racingmars/virtual1403
# IBM font   : https://github.com/Pynckels/prt1403/fonts/IBMPlexMono-Regular.license
# 1403 font  : https://ibm-1401.info/1403Fonts.html#Fonts

from datetime        import datetime
from fontTools.ttLib import TTFont
from fpdf            import FPDF

import argparse
import base64
import json
import lzma
import os
import platform
import re
import socket
import tempfile

#------------------------------------------------------------------------------------------

__VERSION__  = '1.2'

BLUE_DARK    = {'R': 65, 'G':182, 'B':255}                          # Blue banded paper
BLUE_LIGHT   = {'R':214, 'G':239, 'B':255}
BLUE         = (BLUE_DARK, BLUE_LIGHT)

GRAY_DARK    = {'R':200, 'G':200, 'B':200}                          # Gray banded paper and tractor feed holes
GRAY_LIGHT   = {'R':230, 'G':230, 'B':230}
GRAY         = (GRAY_DARK, GRAY_LIGHT)

GREEN_DARK   = {'R': 99, 'G':182, 'B': 99}                          # Green banded paper
GREEN_LIGHT  = {'R':219, 'G':250, 'B':219}
GREEN        = (GREEN_DARK, GREEN_LIGHT)

ORANGE_DARK  = {'R':219, 'G':182, 'B': 99}                          # Orange banded paper
ORANGE_LIGHT = {'R':255, 'G':221, 'B':146}
ORANGE       = (ORANGE_DARK, ORANGE_LIGHT)

WHITE_DARK   = {'R':255, 'G':255, 'B':255}                          # Plain old white paper
WHITE_LIGHT  = {'R':255, 'G':255, 'B':255}
WHITE        = (WHITE_DARK, WHITE_LIGHT)

PAGE_SMALL   = [ 684, 792,  82, 66]                                 #  9.5 inch x 11 inch,  80 chars/line, 66 lines
PAGE_MEDIUM  = [ 864, 792, 107, 66]                                 # 12.0 inch x 11 inch, 100 chars/line, 66 lines
PAGE_WIDE    = [1044, 792, 132, 66]                                 # 14.5 inch x 11 inch, 132 chars/line, 66 lines

FONT1403     = ['IBM140310Pitch-Regular-MRW.ttf', 10, '#$%*+,-./0123456789@ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'FONT1403' ]
FONTMONO     = ['IBMPlexMono-Regular.ttf'       , 12, None,                                             'FONTMONO' ]
FONTOTHER    = [''                              , 10, None,                                             'FONTOTHER']
fontPath     = ''                                                   # Path to temporary file if using internal font

#------------------------------------------------------------------------------------------

def change_invalid_characters(inStr, font):

    '''
    Convert all characters that the font can't cope with to space
    '''

    ASCII_MIN = ' '                                                 # Ascii character 32
    ASCII_MAX = '~'                                                 # Ascii character 126
    ASCII_REP = ' '                                                 # Substitution character

    if font is FONT1403:
        validCharsSet = set( font[2] )
        result = ''.join(char if char in validCharsSet else ASCII_REP for char in inStr.upper())
        return result
    elif font is FONTMONO:
        result = ''.join(char if ASCII_MIN <= char <= ASCII_MAX else ASCII_REP for char in inStr)
        return result
    else:                                                           # Whatever... (Must be refine later)
        return inStr

    return None                                                     # This should never be reached (security measure)

#------------------------------------------------------------------------------------------

def create_separator_page(inFile, userId, jobId, date, fileNr, size, nrPages, nrLines, font):

    '''
    Create the contents of a separator page
    '''

    def print_large_font(sp, base, text, largeFont):
        ''' Print text in sp at base with large font '''
        for line in range(0,10):
            for char in text.strip():
                sp[base+line] += largeFont[char][line] + ' '
        infoWidth = max(len(line) for line in sp[base:base+10])
        for line in range(0,10):
            sp[base+line] = sp[base+line][:-1]
            sp[base+line] = ' ' * ((pageWidth-infoWidth) // 2 ) + sp[base+line]
        return sp

    fileNum   = str(fileNr).rjust(3,'0')                            # Get file number as string (fill with 0's)
    fontLzm   = base64.b64decode(SEPFONT)                           # Load large character dictionary
    fontJson  = lzma.decompress(fontLzm)
    fontDict  = json.loads(fontJson)
    pageWidth = size[2]                                             # Get page width in characters

    if (font is FONTOTHER):                                         # Get font name
        fontName = font[0]
    else:
        fontName = font[3]

    sp = empty_strings_list = [''] * 66                             # Initialize with empty lines

    sp[ 0] = '*' * pageWidth                                        # Fill in the blanks...
    sp[ 1] = ('-  ' * (pageWidth // 3 - 1) + '-').center(pageWidth)
    sp[ 2] = '*' * pageWidth
    sp[ 3] = '*' * pageWidth
    sp[ 4] = '*' * pageWidth
    sp[ 5] = 'DATE: ' + date + '     USER: ' + userId + '     JOB: ' + jobId + ' ' * ( pageWidth - 72 ) + 'PAGE: 0000'

    sp[ 9] = jobId + '  ' + userId + '   FILE NAME/TYPE= ' + inFile
    sp[10] = jobId + '  ' + userId
    sp[11] = jobId + '  ' + userId + '   CREATION DATE/TIME= ' + date
    sp[12] = jobId + '  ' + userId
    sp[13] = jobId + '  ' + userId + '   FILE= ' +  str(fileNr ).rjust(3,'0') + \
                                     '   PAGES= ' + str(nrPages).rjust(4,'0') + \
                                     '   LINES= ' + str(nrLines).rjust(6,'0')
    sp[14] = jobId + '  ' + userId
    sp[15] = jobId + '  ' + userId + '   SYSTEM= ' + platform.system() + '(' + platform.release() + ')'
    sp[16] = jobId + '  ' + userId
    sp[17] = jobId + '  ' + userId + '   SYSID= ' + socket.gethostname() + '   SYSUSER= ' + os.getlogin()
    sp[18] = jobId + '  ' + userId
    sp[19] = jobId + '  ' + userId + '   SYSUSER= ' + os.getlogin()
    sp[20] = jobId + '  ' + userId
    sp[21] = jobId + '  ' + userId + '   FORM= STANDARD'
    sp[22] = jobId + '  ' + userId
    sp[23] = jobId + '  ' + userId + '   CHAR= ' + fontName

    sp = print_large_font(sp, 27, userId,  fontDict)                # Print UserID in large font
    sp = print_large_font(sp, 39, jobId,   fontDict)                # Print JobID  in large font
    sp = print_large_font(sp, 51, fileNum, fontDict)                # Print file number in large font

    sp[63] = '*' * pageWidth
    sp[64] = '*' * pageWidth
    sp[65] = '*' * pageWidth

    for i in range(0,66):
        sp[i] = sp[i].upper()                                        # To be on the safe side (with glyphs)

    return sp

#------------------------------------------------------------------------------------------

def draw_bezier_curve(pdf, x0, y0, x1, y1, x2, y2, steps=20):

    '''
    Draw a quadratic Bézier curve (approximated by a series of lines, default 20)
    '''

    last_x, last_y = x0, y0                                         # Initialize the first point

    for t in range(1, steps + 1):
        u = t / steps                                               # Bézier curve point at parameter t (0 <= t <= 1)
        x = (1 - u)**2 * x0 + 2 * (1 - u) * u * x1 + u**2 * x2
        y = (1 - u)**2 * y0 + 2 * (1 - u) * u * y1 + u**2 * y2

        if t != 1:                                                  # Draw a line from last point to the current point
            pdf.line(last_x, last_y, x, y)

        last_x, last_y = x, y                                       # Update last point to current point

#------------------------------------------------------------------------------------------

def prt1403_add_font(pdf, font):

    '''
    Set font to use during printing
    '''

    global fontPath

    if font is FONTOTHER:                                           # Load font installed on the pc
        pdf.add_font('prt1403Font', '', font[0])
    else:                                                           # Load font from included base64
        if not (font is FONT1403) and not (font is FONTMONO):       # Security measure to prevent invalid font
            font = FONTMONO
                                                                    # Setup prt1403 font, load from variable
        with tempfile.NamedTemporaryFile(delete=False, delete_on_close=False, suffix='.ttf') as tf:
            tf.write(font[0])
            fontPath = tf.name
            pdf.add_font('prt1403Font', '', fontPath)

#------------------------------------------------------------------------------------------

def prt1403_draw_form(pdf, size, color):

    '''
    Draw the form background (bars, lines, characters, ...)
    '''

    FREE_HOLE_RADIUS = 5.5                                          # Experimentally found constant

    page_width  = size[0]
    page_height = size[1]

    pdf.set_draw_color(color[0]['R'], color[0]['G'], color[0]['B']) # Form settings
    pdf.set_fill_color(color[1]['R'], color[1]['G'], color[1]['B'])
    pdf.set_text_color(color[0]['R'], color[0]['G'], color[0]['B'])
    pdf.set_font("helvetica", "", 7)

    pdf.set_line_width(0.7)                                         # Alignment fiducial
    pdf.line(20, 54-FREE_HOLE_RADIUS*2, 20, 54+FREE_HOLE_RADIUS*2)
    pdf.line(20-FREE_HOLE_RADIUS*2, 54, 20+FREE_HOLE_RADIUS*2, 54)
    pdf.set_line_width(1.5)
    pdf.circle(20, 54, FREE_HOLE_RADIUS+.6, "D")
                                                                    # Draw form number (1412THE)
    x_position = page_width - 9                                     #  9 units from the right margin
    y_position = 57                                                 # 57 units from the top margin
    with pdf.rotation(-90, x_position, y_position):
        pdf.text(x_position, y_position, '1412THE')
                                                                    # Area alignment arrows
    pdf.polygon( [(40+2, 72-11), (40+2+5, 72), (40+2+5*2, 72-11)], style='F')
    pdf.polygon( [(page_width-40-2, 72-11), (page_width-40-2-5, 72), (page_width-40-2-5*2, 72-11)], style='F')

    bX = page_width - 20                                            # Outline "1"
    bY = page_height - 29
    bU = 0.6
    pdf.set_line_width(1)
    pdf.line(bX+bU*5, bY-bU*17, bX+bU*5, bY-bU*3.5)
    pdf.line(bX+bU*5, bY-bU*3.5, bX, bY-bU*3.5)
    pdf.line(bX, bY-bU*3.5, bX, bY)
    pdf.line(bX, bY, bX+bU*14, bY)
    pdf.line(bX+bU*14, bY, bX+bU*14, bY-bU*3.5)
    pdf.line(bX+bU*14, bY-bU*3.5, bX+bU*9, bY-bU*3.5)
    pdf.line(bX+bU*9, bY-bU*3.5, bX+bU*9, bY-bU*24)
    pdf.line(bX+bU*9, bY-bU*24, bX+bU*8, bY-bU*24)
    draw_bezier_curve(pdf, bX+bU*8, bY-bU*24, bX+bU*6, bY-bU*20.5, bX, bY-bU*19)
    pdf.line(bX, bY-bU*19, bX, bY-bU*15)
    draw_bezier_curve(pdf, bX, bY-bU*15, bX+bU*3.5, bY-bU*15.5, bX+bU*5, bY-bU*17)

    for i in range(0,10):                                           # Bars - fill
        pdf.rect(40, 72+i*72-0.5, page_width-80, 36, 'F')

    pdf.set_line_width(0.7)                                         # Bars - horizontal lines
    pdf.line(30-0.25, 72-0.5, page_width-30+0.25, 72-0.5)
    pdf.line(30-0.25, page_height-1-0.5, page_width-30+0.25, page_height-1-0.5)
    for i in range(0,20):
        pdf.line(40, 72+36*i-0.5, page_width-40, 72+36*i-0.5)

    pdf.set_line_width(0.5)                                         # Vertical lines
    pdf.line(30-0.5, 72-0.5, 30-0.5, page_height-1-0.5)
    pdf.line(40, 72-0.5, 40, page_height-1-0.5)
    pdf.line(page_width-30+0.5, 72-0.5, page_width-30+0.5, page_height-1-0.5)
    pdf.line(page_width-40, 72-0.5, page_width-40, page_height-1-0.5)

    for i in range(0,60):                                           # Left margin numbers
        pdf.set_xy(30, 72+i*12)
        w = 9.7
        if i < 9 : w = 10
        pdf.cell(w, 12, text=str(i+1), align='C')

    for i in range(0,80):
        pdf.set_xy(page_width-40, 72+i*9)
        w = 9.7
        if i < 9 : w = 10
        pdf.cell(w, 9, str(i+1), align='C')

#------------------------------------------------------------------------------------------

def prt1403_draw_holes(pdf, size, color):

    '''
    Draw the perforated holes
    Must be called after prt1403_draw_form in order to 'perforate' the alignment fiducial
    '''

    FREE_HOLE_RADIUS = 5.5                                          # Experimentally found constant

    page_width  = size[0]
    page_height = size[1]

    pdf.set_draw_color(color[0]['R'], color[0]['G'], color[0]['B']) # Hole settings
    pdf.set_fill_color(color[1]['R'], color[1]['G'], color[1]['B'])
    pdf.set_line_width(0.75)

    y = 18.0 + 18.0 * 2 * 0                                         # Top holes are larger than other holes
    pdf.circle(20, y, FREE_HOLE_RADIUS+1, "FD")
    pdf.circle(page_width - 20, y, FREE_HOLE_RADIUS+1, 'FD')

    y = 18.0 + 18.0 * 2 * 21                                        # Bottom holes are larger than other holes
    pdf.circle(20, y, FREE_HOLE_RADIUS+1, "FD")
    pdf.circle(page_width - 20, y, FREE_HOLE_RADIUS+1, 'FD')

    for i in range(1,21):                                           # All other holes
        y = 18.0 + 18.0 * 2 * i
        pdf.circle(20, y, FREE_HOLE_RADIUS, "FD")
        pdf.circle(page_width - 20, y, FREE_HOLE_RADIUS, 'FD')

#------------------------------------------------------------------------------------------

def prt1403_draw_page(pdf, text, size, font, color_form, color_holes):

    '''
    Draw a single page of text.
    text contains all the text that should be places on this page (incl. headers, footers, ...)
    '''

    pdf.add_page()                                                  # Create new page
    pdf.set_margins(0, 0, 0)
    pdf.set_auto_page_break(True, margin = 0.0)
    prt1403_draw_form(pdf, size, color_form)                        # Draw page background
    prt1403_draw_holes(pdf, size, color_holes)                      # Draw page holes (after drawing background)

    pdf.set_font('prt1403Font')                                     # Activate prt1403 font
    pdf.set_font_size(font[1])
    pdf.set_text_color(0, 0, 0)

    lines = [ line[:size[2]+1].rstrip() for line in text[:size[3]] ] # Clip to maximal number chars and lines

    lineNr = 1                                                      # Print all lines on the page
    for line in lines:
        line = change_invalid_characters(line, font)                # Check if the font can cope with the text chars
        pdf.text(43, lineNr*12-3, line);
        lineNr += 1

    return

#------------------------------------------------------------------------------------------

def prt1403_print(
    inFile                  ,
    outFile                 ,
    font                    ,
    size        = PAGE_WIDE ,
    color_form  = GREEN     ,
    color_holes = GRAY      ,
    userId      = 'USERID'  ,
    jobId       = 'JOBID'   ,
    header      = True      ,
    separator   = False
    ):

    '''
    Print the text in inFile. This file does not contain an ASA (page formatting) column
    '''

    date = datetime.now().strftime("%d-%m-%Y %H:%M:%S")
    head = 'DATE: ' + date + '     USER: ' + userId + '     JOB: ' + jobId + \
           ' ' * ( size[2] -72 ) + 'PAGE: '
    page = 1
    fileNr = 1

    linesPerPage = 66
    if header:
        linesPerPage = 60

    with open(inFile, 'r') as inf:
        lines = inf.readlines()

    nrLines = len(lines)
    nrPages = nrLines // linesPerPage + 1

    pdf = FPDF(orientation='P', unit='pt', format=size)             # Create fpdf environment
    prt1403_add_font(pdf, font)                                     # Load required font

    if separator:                                                   # Print separator page
        text = create_separator_page(inFile, userId, jobId, date, fileNr, size, nrPages, nrLines, font)
        prt1403_draw_page(pdf, text, size, font, color_form, color_holes)

    while len(lines):                                               # Print contents
        if header:                                                  # Print header
            text = [' ', ' ', ' ']
            text = text + [head + f'{page:04}']
            text = text + [' ', ' ']
        else:
            text = []
        text = text + lines[:linesPerPage]                          # Print data
        prt1403_draw_page(pdf, text, size, font, color_form, color_holes)
        page += 1                                                   # Update status variables
        lines = lines[linesPerPage:]

    pdf.output(outFile)                                             # Write pdf file

    if fontPath != '':
        os.remove(fontPath)                                         # Clean up: Delete temporary font file if one was created

#------------------------------------------------------------------------------------------

def main():

    '''
    Check arguments and print file with the given options
    '''

    def font_validator(font_path):
        ''' Check if the font_path is 'FONT1403', 'FONTMONO' or a an existing .otf or .ttf file '''
        progName  = os.path.basename(__file__)
        if font_path == 'FONT1403':
            return font_path
        elif font_path == 'FONTMONO':
            return font_path
        else:
            try:
                font = TTFont(font_path)
                #with open(font_path, 'rb') as file:
                #    file.read()
                return font_path                                    # Return the font path if it's a valid file
            except FileNotFoundError:
                print(parser.format_usage().strip())
                print(f'{progName}: error: The file {font_path} does not exist.')
                quit()            
            except:
                print(parser.format_usage().strip())
                print(f'{progName}: error: The file {font_path} is not a valid TrueType font file.')
                quit()            

    def id_validator(value):
        ''' Check if the value is between 1 and 8 characters long and is alphanumeric. '''
        if not re.match(r'^[a-zA-Z0-9]{1,8}$', value):
            raise argparse.ArgumentTypeError('Job ID and User ID must be between 1 and 8 alphanumeric characters.')
        return value

    def infile_validator(file_path):
        ''' Check if the file is UTF-8 encoded. '''
        progName  = os.path.basename(__file__)
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                file.read()
            return file_path                                        # Return the file path if it's a valid UTF-8 file
        except UnicodeDecodeError:
            print(parser.format_usage().strip())
            print(f'{progName}: error: The file {file_path} is not a valid UTF-8 text file.')
            quit()
        except FileNotFoundError:
            print(parser.format_usage().strip())
            print(f'{progName}: error: The file {file_path} does not exist.')
            quit()

    def outfile_validator(file_path, overwrite=False):
        ''' Check if the output file path is valid and does not exist, unless overwrite is True. '''
        overwrite = args.overwrite
        progName  = os.path.basename(__file__)
        directory = os.path.dirname(file_path)                      # Check if the directory exists
        if not os.path.isdir(directory) and directory != '':
            print(parser.format_usage().strip())
            print(f'{progName}: error: The directory {directory} does not exist.')
            quit()
        if os.path.exists(file_path) and not overwrite:             # Check if the file exists and overwrite is not allowed
            print(parser.format_usage().strip())
            print(f'{progName}: error: The file {file_path} already exists. Use -y to overwrite.')
            quit()
        return file_path                                            # Return the output file path if it's valid

    parser = argparse.ArgumentParser(description='Print a text file to PDF in IBM 1403 retro style')

    parser.add_argument('infile',            metavar='<Input file>',  type=infile_validator,                                               help='File to process.')
    parser.add_argument('-c', '--color',                              choices=['BLUE', 'GRAY', 'GREEN', 'WHITE'],   default='GREEN',       help='Color of form preprint. Text color is black.')
    parser.add_argument('-e', '--separator',                          action='store_true',                          default=False,         help='Print separator page.')
    parser.add_argument('-f', '--font',                               type=font_validator,                          default='FONTMONO',    help='Choose between FONT1403, FONTMONO or an installed font.')
    parser.add_argument('-j', '--jobid',     metavar='jobID',         type=id_validator,                            default='NONE',        help='Job identifier (1 to 8 alphanumeric characters).')
    parser.add_argument('-n', '--noheader',                           action='store_true',                          default=False,         help='Disable printing of page headers.')
    parser.add_argument('-o', '--outfile',   metavar='<Output file>', type=str,                                     default='prt1403.pdf', help='Output file name.')
    parser.add_argument('-p', '--points',                             type=int,                                     default=12    ,        help='Size of font in points (e.g. 10). Not used for FONT1403 or FONTMONO.')
    parser.add_argument('-s', '--size',                               choices=['SMALL', 'MEDIUM', 'WIDE'],          default='WIDE',        help='Paper width 9.5", 12" or 14.5". Paper height is 11"')
    parser.add_argument('-u', '--userid',    metavar='userID',        type=id_validator,                            default='NONE',        help='User identifier (1 to 8 alphanumeric characters).')
    parser.add_argument('-v', '--version',   action='version',        version='%(prog)s (version {version})'.format(version=__VERSION__),  help='Show program version and exit.')
    parser.add_argument('-y', '--overwrite',                          action='store_true',                          default=False,         help='Overwrite output file.')

    args = parser.parse_args()
    args.outfile = outfile_validator(args.outfile, overwrite=args.overwrite)

    if args.font == 'FONT1403':                                     # Load font from included base64
        font    = FONT1403
        fontLzm = base64.b64decode(IBM1403)
        fontBin = lzma.decompress(fontLzm)
        font[0] = fontBin
    elif args.font == 'FONTMONO':                                   # Load font from included base64
        font = FONTMONO
        fontLzm = base64.b64decode(IBMPlexMono)
        fontBin = lzma.decompress(fontLzm)
        font[0] = fontBin
    else:                                                           # Load font installed on the pc
        font = FONTOTHER
        font[0] = args.font
        font[1] = args.points

    userId = args.userid[:8].upper().ljust(8, ' ')                  # Normalize UserID
    jobId  = args.jobid[:8].upper().ljust(8, ' ')                   # Normalize JobID

    prt1403_print(                                                  # Hit the road...
        args.infile                                  ,
        args.outfile                                 ,
        font        = font                           ,
        size        = globals()['PAGE_' + args.size] ,
        color_form  = globals()[args.color]          ,
        color_holes = GRAY                           ,
        userId      = userId                         ,
        jobId       = jobId                          ,
        header      = not args.noheader              ,
        separator   = args.separator
    )

#------------------------------------------------------------------------------------------

SEPFONT = """/Td6WFoAAATm1rRGAgAhARYAAAB0L+Wj4BM2ArtdAD2IhCIh3pTod1OnT8nY4vr2Dz4e9Yl5EGt81H
B81M0NDeOkhEzxK7yAElFN1uaU/i4Dqu4gyD56L3B5KL6gPeQ4nvOai+69PSPBX1RwcQcAzBkCK89MlHS5iJwe+ETgt
QXeMrfWd06R4lQnlCGsijH1WcHjD4zGak0//ckq3dr6PlLc1nNpyy7sCwxopilPXp1qaiDLxeiuoB5uE/tj9E+XOV7Q
JGoZ5lgZAIayXJm3kKyi2UwZP8XlIpWxl6kfP6GQq3hN0gdSBo1bz/t0ndCGY4ZKTkp4LDYQX6XbWKyrMkBjilwX/H+
fbZHMx4iyLSzIhIUV95e5CA5ymW2OD8LLMU3sk5VmVFn8MKFTXMDvuieW3CzVIHCaj5uNl4lzn/586YoW0FV9cfOZxp
haMWE8fILCTrhVC5Hla58mCUqa1erOTQ1bTEmLm/2YXRKKHA2E6JyNVonFpUVhuin0Du0CPR2xwTQsxnLLAKYQapbMZ
uorZprKYAxf2InR/r6a6Vxr5al1rp3Nxob4zjYJuFM+S26o1g+6M82Q8Kx0bV1bv57tX9BXPI9MktZ31+eUlil9tRKv
4ZpjLhTnxIHvTTNT/TJBhool1pHjlrYB8fQX5QNCb61aUD7cxoEkF7H1c/Wv0RctIp1sXr+McDvdXPn//1VJcXM9I8p
scHNdD4Yc+B6dPSlXi23rFsX/DzE80MHT+v2/V7RD7p12ZMHg9vy/JrEJUHGlmJKDUi68I+84A8fGXEsVBi239qjKMm
BKSs8XoSA+uUeEJb7cVofmXmz3vSd6Qf5uDwBjsF3/Qs7hKAEjut+Ofv3c/FPf5FpRCEOJyEvknBKC/p29X0+Qbr1Pc
t0pyF1y8IZllhteBRSwFpzLVtv+mRv5/ZErSXpJxo1F9vzO9mfqoCmylaWxWitrhuIJLh+VzM2YAAAAVO19Szm8gW8A
AdcFtyYAAEs767ixxGf7AgAAAAAEWVo="""

#------------------------------------------------------------------------------------------

IBMPlexMono = """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
7AozsBqRcy7exxGf7AgAAAAAEWVo="""

#------------------------------------------------------------------------------------------

IBM1403 = """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
LwC8LYEFhskNrHEZ/sCAAAAAARZWg=="""

#------------------------------------------------------------------------------------------

if __name__ == '__main__':
    main()                                                          # Do not run if script is imported as a module
